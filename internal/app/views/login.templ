package views

import (
	"github.com/fearhunt/simplified-auth-htmx/internal/app/entity"
	"fmt"
	"strconv"
)

templ headerLoginComponent(u *entity.User) {
	{{ 
		var name string

		if u != nil && u.Name != "" {
			name = u.Name
		}
	}}

	<div>
		// <p>𝓼𝓲𝓶𝓹𝓵𝓲𝓯𝓲𝓮𝓭 𝓪𝓾𝓽𝓱 😝</p>
		<p class="text-xl font-bold">Simplified Auth 😝</p>
		<p class={ "text-xs", templ.KV("h-4", name == "") }>
			if name != "" {
				Welcome back, <strong>{ name }</strong>!
			}
		</p>
	</div>
}

templ Login(u *entity.User, fla entity.FailedLoginAttempts) {
	<script>
		function showModal() {
			const modal = document.querySelector('#modal-account-list')
			const dialog = modal.querySelector('dialog')
			if (dialog)
				dialog.showModal()
		}
	</script>

	<div
		id="login-wrapper"
		hx-ext="response-targets"
		class="w-[400px] max-w-full border shadow-lg rounded-lg px-4 py-6 text-slate-700 bg-white relative">
		@headerLoginComponent(u)

		<form
			hx-post="/auth/login"
			hx-vals={ fmt.Sprintf(`{"correct_password": "%s"}`, getSafePassword(u)) }
			hx-target="#login-wrapper"
			hx-target-422="#err-submit-wrapper"
			hx-swap="innerHTML"
			class="flex flex-col gap-3 !mt-2">
			<div class="space-y-1">
				<label for="input-username" class="text-xs mb-1">Username</label>
				<input
					id="input-username"
					name="username"
					hx-get="/users/find"
					hx-trigger="keyup changed delay:750ms"
					hx-target="#login-wrapper"
					hx-swap="outerHTML"
					if u != nil {
						value={ u.Username }
					}
					type="text"
					placeholder="eg: john_doe (real)"
					class="block w-full text-sm border rounded p-1.5"
				/>

        if fla.UsernameCheck != 0 && u != nil {
          <div class="flex gap-2.5 justify-between mt-1">
            <span class="text-xs text-red-600">Username <strong>{ u.Username }</strong> does not exist.</span>
            if fla.UsernameCheck >= 3 {
              <button
                hx-get="/users"
                hx-target="#modal-account-list"
								hx-on::after-request="showModal()"
                class="shrink-0 text-xs text-blue-400 hover:text-blue-500 transition-colors underline cursor-pointer">
                Forgot Username?
              </button>
            } 
          </div>
        }
			</div>

			<div class="space-y-1">
				<label for="input-password" class="text-xs mb-1">Password</label>
				<input
					id="input-password"
					name="password"
					type="password"
					maxlength={ strconv.Itoa(len(getSafePassword(u))) }
					hx-post="/user/validate-password"
					hx-vals={ fmt.Sprintf(`{"correct_password": "%s"}`, getSafePassword(u)) }
					hx-trigger="keyup changed"
					hx-target="#password-matcher-wrapper"
					if getSafePassword(u) != "" {
						placeholder="Input password"
					} else {
						placeholder="Please input username first"
						disabled
					}
					class="block w-full text-sm border rounded p-1.5 transition disabled:bg-gray-100"
				/>

				<div id="password-matcher-wrapper">
					@PasswordMatch("", getSafePassword(u), fla, true)
				</div>
			</div>

			<button
				type="submit"
				class="bg-[rgba(54,162,235,0.8)] hover:bg-[rgba(54,162,235,1)] disabled:opacity-60 disabled:cursor-not-allowed transition
					text-white font-semibold py-2 px-4 rounded-md
					shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50"
				disabled?={ getSafePassword(u) == "" }>
				Login
			</button>
			<div id="err-submit-wrapper" />
		</form>

		<div id="modal-account-list" />
	</div>
}

templ PasswordMatch(inputPwd, correctPwd string, fla entity.FailedLoginAttempts, isMasked bool) {
	if correctPwd != "" {
		<small class="text-gray-500 text-[10px] mt-1">Hint:</small>

		<div class="flex gap-1 items-center text-sm">
			<div>
				for i := range len(correctPwd) {
					{{ 
						isMatch := false

						if i <= len(inputPwd) - 1 {
							isMatch = inputPwd[i] == correctPwd[i]
						}
					}}

					<span class="password-hint">
						<spann class={
							templ.KV("text-red-600", !isMatch),
							templ.KV("text-green-600", isMatch)
						}>
							if i <= 1 || i >= (len(correctPwd) - 2) || !isMasked {
								{ fmt.Sprintf("%c", correctPwd[i]) }
							} else {
								*
							}
						</spann>
					</span>
				}
			</div>

			<button
				hx-post="/user/validate-password"
				hx-vals={ fmt.Sprintf(`{"correct_password": "%s", "masked": %v}`, correctPwd, !isMasked) }
				hx-target="#password-matcher-wrapper"
				type="button"
				class="size-4">
				<img 
					class="img-password" 
					if isMasked {
						src="/assets/img/eye-password-hidden.svg"
					} else {
						src="/assets/img/eye-password-shown.svg"
					}
				/>	
			</button>
		</div>
	}
}

templ SuccessLogin() {
	<div class="flex flex-col gap-4 items-center">
		<p class="text-center text-xl font-bold">yay, you made it! 🥳</p> 
		<button
			hx-get="/"
			hx-target="body"
			hx-swap="innerHTML"
			type="button"
			class="bg-[rgba(54,162,235,0.8)] hover:bg-[rgba(54,162,235,1)] disabled:opacity-60 disabled:cursor-not-allowed transition
				text-white font-semibold py-2 px-4 rounded-md
				shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
			Relogin
		</button>	
	</div>
}

func getSafePassword(u *entity.User) string {
	if u == nil {
		return ""
	}

	return u.Password
}
